<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EventBus on</title><link>https://guanpj.github.io/amethyst/tags/EventBus/</link><description>Recent content in EventBus on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://guanpj.github.io/amethyst/tags/EventBus/index.xml" rel="self" type="application/rss+xml"/><item><title>EventBus 使用及源码解析</title><link>https://guanpj.github.io/amethyst/Knowledge/Android/%E5%BC%80%E6%BA%90%E5%BA%93/EventBus-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guanpj.github.io/amethyst/Knowledge/Android/%E5%BC%80%E6%BA%90%E5%BA%93/EventBus-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>使用 # 首先引入依赖 apply plugin: &amp;#39;kotlin-kapt&amp;#39; dependencies { implementation &amp;#39;org.greenrobot:eventbus:3.2.0&amp;#39; kapt &amp;#39;org.greenrobot:eventbus-annotation-processor:3.2.0&amp;#39; } kapt { arguments { arg(&amp;#39;eventBusIndex&amp;#39;, &amp;#39;com.me.guanpj.myapplication.MyEventBusIndex&amp;#39;) } } 从在 3.0 版本开始，EventBus 提供了一个 EventBusAnnotationProcessor 注解处理器来在编译期通过读取 @Subscribe 注解，并解析和处理其中所包含的信息，然后生成 Java 类索引来保存订阅者中所有的事件响应函数，这样就比在运行时使用反射来获得订阅者中所有事件响应函数的速度要快。
以下是来自官方对 EventBus 各个版本性能的对比图，可以看到，EventBus 3.x 如果没有使用索引的话性能相较于之前的版本是倒退的。使用索引能让 EventBus 的性能大大增加。
添加混淆规则： -keepattributes *Annotation* -keepclassmembers class * { @org.greenrobot.eventbus.Subscribe &amp;lt;methods&amp;gt;; } -keep enum org.greenrobot.eventbus.ThreadMode { *; } # And if you use AsyncExecutor: -keepclassmembers class * extends org.</description></item></channel></rss>