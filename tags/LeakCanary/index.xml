<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LeakCanary on</title><link>https://guanpj.github.io/amethyst/tags/LeakCanary/</link><description>Recent content in LeakCanary on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://guanpj.github.io/amethyst/tags/LeakCanary/index.xml" rel="self" type="application/rss+xml"/><item><title>LeakCanary 使用及源码解析</title><link>https://guanpj.github.io/amethyst/Knowledge/Android/%E5%BC%80%E6%BA%90%E5%BA%93/LeakCanary-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guanpj.github.io/amethyst/Knowledge/Android/%E5%BC%80%E6%BA%90%E5%BA%93/LeakCanary-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>Reference 介绍 # Reference 即是我们平时所说的“引用”，与之对应的是一个泛型抽象类。四种引用类型：SoftReference(软引用)、WeakReference(弱引用)、PhantomReference（虚引用）都继承自 Reference。它的声明如下：
public abstract class Reference&amp;lt;T&amp;gt; { //引用对象 volatile T referent; //保存即将被回收的Reference对象 final ReferenceQueue&amp;lt;? super T&amp;gt; queue; //在Enqueued状态下即引用加入队列时，指向下一个待处理Reference对象,默认为null Reference queueNext; //在Pending状态下，待入列引用，默认为null Reference&amp;lt;?&amp;gt; pendingNext; ... } Reference 有四种状态：Active、Pending、Enqueued、Inactive，默认为 Active 状态。
ReferenceQueue 则是一个单向链表实现的队列数据结构，存储的是 Reference 对象。包含了入列 enqueue、出列 poll 和移除 remove 操作。
ReferenceQueue 原理和使用示例 # Reference 配合 ReferenceQueue 可以实现对象回收监听，使用方法如下：
//创建一个引用队列 ReferenceQueue queue = new ReferenceQueue(); //创建对象 Object object = new Object(); //创建 object 对象的弱引用，并关联引用队列 queue WeakReference reference = new WeakReference(object, queue); System.</description></item></channel></rss>