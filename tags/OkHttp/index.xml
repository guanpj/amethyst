<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OkHttp on</title><link>https://guanpj.github.io/amethyst/tags/OkHttp/</link><description>Recent content in OkHttp on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://guanpj.github.io/amethyst/tags/OkHttp/index.xml" rel="self" type="application/rss+xml"/><item><title>OkHttp 使用及源码分析</title><link>https://guanpj.github.io/amethyst/OkHttp-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guanpj.github.io/amethyst/OkHttp-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>https://juejin.cn/post/6881436122950402056
请求流程 # 同步请求 # MainActivity.kt
val user = &amp;#34;guanpj&amp;#34; val client = OkHttpClient.Builder() .connectTimeout(15, TimeUnit.SECONDS) .writeTimeout(30, TimeUnit.SECONDS) .readTimeout(30, TimeUnit.SECONDS) .proxy(Proxy.NO_PROXY) .addInterceptor(HttpLoggingInterceptor { message -&amp;gt; if (BuildConfig.DEBUG) { Log.i(&amp;#34;OkHttp&amp;#34;, message) } }) .build() val request: Request = Request.Builder() .url(&amp;#34;https://api.github.com/users/$user/repos&amp;#34;) .build() val response = client.newCall(request).execute() println(&amp;#34;Response status code: ${response.code}&amp;#34;) OkHttpClient.kt
/** Prepares the [request] to be executed at some point in the future.</description></item></channel></rss>