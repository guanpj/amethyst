<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RxJava on</title><link>https://guanpj.github.io/amethyst/tags/RxJava/</link><description>Recent content in RxJava on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://guanpj.github.io/amethyst/tags/RxJava/index.xml" rel="self" type="application/rss+xml"/><item><title>RxJava 使用及源码分析</title><link>https://guanpj.github.io/amethyst/RxJava-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guanpj.github.io/amethyst/RxJava-%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>https://juejin.cn/post/6881436122950402056
介绍 # Rx 是 ReactiveX 的简写，后者是 Reactive Extensions 的缩写，Rx 是一种编程模型，用于方便处理异步数据流。
RxJava 是响应式编程（Reactive Extensions）在 Java VM 上的实现，是一个在 Java VM 上使用可观察序列来组成异步的、基于事件的程序库。
它扩展了观察者模式以支持数据/事件序列，并添加了运算符，允许以声明方式将序列组合在一起，同时抽象出对低级线程、同步、线程安全和并发数据结构等事物的关注。
RxJava 是一个 基于事件流、实现异步操作的库，因此它具有如下特点：
异步。这里主要就是两个核心的方法 subscribeOn 和 observeOn。这两个方法都传入一个 Scheduler 对象，subscribeOn 指定产生事件的线程，observeOn 指定消费事件的线程。 强大的操作符。提供了一系列的转换操作符，可以将事件序列中的某个事件或整个事件序列进行加工处理，转换成不同的事件或事件序列，然后再发送出去。 简洁。由于采用链式调用的方式进行事件流的处理，RxJava 在应对较复杂的逻辑的时候，也能展现出清晰的思路。异步操作很关键的一点是程序的简洁性，因为在调度过程比较复杂的情况下，异步代码经常会既难写也难被读懂。 Android 创造的 AsyncTask 和 Handler ，其实都是为了让异步代码更加简洁。RxJava 的优势也是简洁，但它的简洁的与众不同之处在于，随着程序逻辑变得越来越复杂，它依然能够保持简洁。 观察者模式 # RxJava 有四个基本概念：Observable (可观察者，被观察者，生产者)、 Observer (观察者，消费者)、 subscribe (订阅)、Event (事件)。Observable 和 Observer 通过 subscribe() 方法实现订阅关系，Observable 可以在需要的时候发出事件来通知 Observer，且 RxJava 支持事件以队列的形式连续发送。
角色 作用 被观察者（Observable） 产生事件 观察者（Observer） 接收事件，并给出响应动作 订阅（Subscribe） 连接 被观察者 &amp;amp; 观察者 事件（Event） 被观察者 &amp;amp; 观察者 沟通的载体 RxJava 的整体结构是一条链，其中：</description></item></channel></rss>